module pipe_read (input	[31:0] message_addr,
// Starting address of the plaintext frame
// i.e., specifies from where RLE must read the plaintext frame

input	[31:0] message_size,
// Length of the plain text in bytes

input   [31:0] port_A_data_out,
// read data from the dpsram (plaintext)

output  [15:0] port_A_addr,
// address of dpsram being read/written

output  port_A_clk,
// clock to dpsram (drive this with the input clk)

output  port_A_we,
// read/write selector for dpsram

input new_data_ready,
input clk
input reset,
output [31:0] dout
output done_read);

reg [31:0] curr_addr_off;

always @ (posedge clk)
begin
	if (reset)
	begin
		curr_addr_off <= 0;
	end
	else
	begin
			curr_addr_off <= curr_addr_off + 4;
			port_A_addr <= message_addr + curr_addr_off
	end

end
assign done_read = (curr_addr_off <= message_size);